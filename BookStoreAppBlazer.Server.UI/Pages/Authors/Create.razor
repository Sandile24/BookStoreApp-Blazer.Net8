@page "/authors/create/"
@inject IAuthorService _authorService
@inject NavigationManager _navManager
@attribute [Authorize(Roles = Roles.Administrator)] //This is uswed to hide the page from unauthorized users//


<h3>Create New Author</h3>
<EditForm Model="createDTO" OnValidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText class="form-control" @bind-Value="createDTO.FirstName" id="firstname"/>
        <ValidationMessage For="@(()=> createDTO.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText class="form-control" @bind-Value="createDTO.LastName" id="lastname"/>
        <ValidationMessage For="@(()=> createDTO.LastName)"/>
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputText class="form-control" @bind-Value="createDTO.Bio" id="bio"/>
        <ValidationMessage For="@(()=> createDTO.Bio)" />
    </div>
    <br>
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-plus"></span>
        Create Author
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>

</EditForm>


@code {
    public AuthorCreateDTO createDTO = new AuthorCreateDTO();

    public async Task HandleCreateAuthor()
    {
        var response = await _authorService.CreateAuthor(createDTO);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
