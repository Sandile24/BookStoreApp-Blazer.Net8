@page "/authors/"
@inject IAuthorService _authorService
@inject NavigationManager _navigationManager
@inject IJSRuntime js  //gives us access to different javascript prompt//
<h3>List Of Authors</h3>


@if (response.Success)
{
    <div class="alert alert-info">
        <h4>@response.Message</h4>
    </div>
}

@if (Authors == null)
{
    <div class="alert alert-warning">
        <h4>Loading data...</h4>
    </div>
}
else
{
    //In a following line, if role was a user they would still see create buttton but will not be able to create
    //due to restrictions in the controller.
    <AuthorizeView Roles="Administrator">
        <a class="btn btn-primary" href="/authors/create/"><span class="oi oi-plus" aria-hidden="true"></span>Create </a>
    </AuthorizeView>
    <br />
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Biography</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in Authors)
            {
                <tr>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>@author.Bio</td>
                    <td>
                        <a class="btn btn-primary" disabled="true" href="/authors/update/@author.Id"> <span class="oi oi-book" aria-hidden="true"></span>View</a>
                        <AuthorizeView Roles="Administrator">
                            <a class="btn btn-warning" href="/authors/details/@author.Id"> <span class="oi oi-book" aria-hidden="true"></span>Edit</a>
                            <button class="btn btn-danger" @onclick=@(()=> Delete(@author.Id))><span class="oi oi-delete" aria-hidden="true"></span>Delete</button>
                        </AuthorizeView>
                        
                    </td> 
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<AuthorReadDTO> Authors;
    private Response<List<AuthorReadDTO>> response = new Response<List<AuthorReadDTO>> { Success=true};

    protected override async Task OnInitializedAsync()
    {
        response = await _authorService.GetAuthors();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task Delete(int authorId)
    {
        var author = Authors.First(q=>q.Id==authorId); //introduced this just to give my delete a nice precision
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the author by the name of {author.FirstName}{author.LastName}?");
        if (confirm)
        {
            var response = await _authorService.DeleteAuthor(authorId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }    
    }

    void NavigateToEdit(int id)
    {
        _navigationManager.NavigateTo($"/authors/update/{id}");
    }
}
